# Guardian is a quantum key distribution REST API and supporting software stack.
# Copyright (C) 2021  W. Cyrus Proctor
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

services:

  certauth: &certauth_label
    build: ./certauth
    working_dir: /certificates/generation
    # WARNING:
    # Entrypoint is set to "make"; only 'make clean' to remove
    # and rebuild root and intermediate certificate authorities
    command: ["clean", "certs", "install"]
    labels:
      # Disable Traefik for this specific "backend" service
      - traefik.enable=false
    networks:
      - internal-private
    volumes:
      - ./volumes/certificates:/certificates
      - ./certauth/SECRETS:/SECRETS

  certauth_csr:
    <<: *certauth_label
    command: ["csr"]

  vault:
    # Use the latest Hashicorp Vault v1.7.x image available
    image: vault:${VAULT_TAG:-latest}
    ports:
      # Listen on port 8200
      - 8200:8200
    cap_add:
      # With this priviledged Linux capability, the container will attempt to
      # lock memory to prevent sensitive values from being swapped to disk.
      - IPC_LOCK
    volumes:
      # Mount a volume that stores the Vault @file configurations
      - ./volumes/vault/config:/vault/config
      # Mount a volume that stores any persistent data
      - ./volumes/vault/data:/vault/data
      # Mount a volume to store persistent logs
      - ./volumes/vault/logs:/vault/logs
      # Mount a volume that stores the TLS certificates
      - ./volumes/certificates/production:/certificates
    labels:
      # Disable Traefik for this specific "backend" service
      - traefik.enable=false
    # Server Configuration: /vault/config/vault-config.hcl
    command: ["server"]
    networks:
      # Use only the private internal network created by Docker to be shared
      # by any backend service that needs to communicate amongst internal services
      - internal-private

  vault_init: &vault_init_label
    build: ./vault_init
    command: ["vault_init.py", "--first"]
    labels:
      # Disable Traefik for this specific "backend" service
      - traefik.enable=false
    networks:
      - internal-private
    volumes:
      - ./volumes/certificates:/certificates

  vault_init_phase_2:
    <<: *vault_init_label
    command: ["vault_init.py", "--second"]

  vault_init_phase_3:
    <<: *vault_init_label
    command: ["vault_auth.py"]

  qkd:
    build: ./qkd
    command: ["distclean", "ctest"]
    labels:
      # Disable Traefik for this specific "backend" service
      - traefik.enable=false
    networks:
      - internal-private
    volumes:
      - ./volumes/qkd/epoch_files:/root/code/qsim/epoch_files

  notifier:
    build: ./notifier
    command: ["notifier.py"]
    labels:
      # Disable Traefik for this specific "backend" service
      - traefik.enable=false
    networks:
      - internal-private
    volumes:
      - ./volumes/qkd/epoch_files:/epoch_files
  
  watcher:
    build: ./watcher
    depends_on:
      - notifier
    command: ["/epoch_files/notify.pipe"]
    labels:
      # Disable Traefik for this specific "backend" service
      - traefik.enable=false
    networks:
      - internal-private
    volumes:
      - ./volumes/qkd/epoch_files:/epoch_files


networks:

  # Use the private internal network created by Docker to be shared
  # by any backend service that needs to communicate amongst internal services
  internal-private:
    external: false
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.192.0/24
