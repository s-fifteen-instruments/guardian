# Guardian is a quantum key distribution REST API and supporting software stack.
# Copyright (C) 2021  W. Cyrus Proctor
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
version: "3.7"

services:

  certauth: &certauth_label
    build: 
      context: ./
      dockerfile: ./certauth/Dockerfile
    working_dir: /certificates/generation
    env_file:
      - common/log.env
    # WARNING:
    # Entrypoint is set to "make"; only 'make clean' to remove
    # and rebuild root and intermediate certificate authorities
    command: ["make clean && export LOCAL_KME_ID=${LOCAL_KME_ID:-SETME} && make certs && make install"]
    networks:
      - internal-private
    volumes:
      - ./volumes/${LOCAL_KME_ID:-SETME}/certificates:/certificates
        # Prevents erroneous creation of directory on init if file not present
      - type: bind
        source: ./common/CERTAUTH_SECRETS
        target: /SECRETS
      - type: bind
        source: ./common/CERTAUTH_CONFIG
        target: /CONFIG

  certauth_csr:
    <<: *certauth_label
    command: ["make csr"]

  vault: &vault_label
    # Use the latest Hashicorp Vault v1.7.x image available
    image: vault:${VAULT_TAG:-latest}
    env_file:
      - common/log.env
    ports:
      # Listen on port 8200
      - 8200:8200
    cap_add:
      # With this priviledged Linux capability, the container will attempt to
      # lock memory to prevent sensitive values from being swapped to disk.
      - IPC_LOCK
    volumes:
      # Mount a volume that stores the Vault @file configurations
      - ./volumes/${LOCAL_KME_ID:-SETME}/vault/config:/vault/config
      # Mount a volume that stores any persistent data
      - ./volumes/${LOCAL_KME_ID:-SETME}/vault/data:/vault/data
      # Mount a volume to store persistent logs
      - ./volumes/${LOCAL_KME_ID:-SETME}/vault/logs:/vault/logs
      # Mount a volume that stores the TLS certificates
      - ./volumes/${LOCAL_KME_ID:-SETME}/certificates/production:/certificates
    # Server Configuration: /vault/config/vault-config.hcl
    command: ["server"]
    networks:
      # Use only the private internal network created by Docker to be shared
      # by any backend service that needs to communicate amongst internal services
      - internal-private

  vault_client_auth:
    <<: *vault_label
    ports:
      - 8282:8200
    entrypoint: ["/bin/sh", "-c"]
    command: ["/vault/config/client_auth.sh"]

  vault_init: &vault_init_label
    build:
      context: ./
      dockerfile: ./vault_init/Dockerfile
    env_file:
      - common/log.env
    command: ["vault_init.py", "--first"]
    networks:
      - internal-private
    volumes:
      - ./volumes/${LOCAL_KME_ID:-SETME}/certificates:/certificates
      - ./volumes/${LOCAL_KME_ID:-SETME}/vault/policies:/vault/policies
      - type: bind
        source: ./common/global_config.py
        target: /root/global_config.py
      - type: bind
        source: ./common/vault_init_config.py
        target: /root/vault_init_config.py

  vault_init_phase_2:
    <<: *vault_init_label
    environment:
      - LOCAL_KME_ID=${LOCAL_KME_ID:-SETME}
      - REMOTE_KME_ID=${REMOTE_KME_ID:-SETME}
      - LOCAL_SAE_ID=${LOCAL_SAE_ID:-SETME}
      - REMOTE_SAE_ID=${REMOTE_SAE_ID:-SETME}
    command: ["vault_init.py", "--second"]

  vault_clear:
    <<: *vault_init_label
    env_file:
      - common/log.env
    environment:
      - LOCAL_KME_ID=${LOCAL_KME_ID:-SETME}
      - REMOTE_KME_ID=${REMOTE_KME_ID:-SETME}
    command: ["vault_init.py", "--reset"]
    volumes:
      - ./volumes/${LOCAL_KME_ID:-SETME}/certificates:/certificates

  qkd:
    build:
      context: ./
      dockerfile: ./qkd/Dockerfile
    env_file:
      - common/log.env
    command: ["clean", "ctest"]
    networks:
      - internal-private
    volumes:
      # NOTE: Only kme1 generates epoch files in this configuration
      - ./volumes/kme1/qkd/epoch_files:/root/code/qsim/epoch_files

  notifier:
    build:
      context: ./
      dockerfile: ./notifier/Dockerfile
    env_file:
      - common/log.env
    command: ["notifier.py"]
    networks:
      - internal-private
    volumes:
      # NOTE: Only kme1 generates epoch files in this configuration
      - ./volumes/kme1/qkd/epoch_files/${LOCAL_KME_ID:-SETME}:/epoch_files
 
  watcher:
    build:
      context: ./
      dockerfile: ./watcher/Dockerfile
    env_file:
      - common/log.env
    command: ["watcher.py"]
    networks:
      - internal-private
    volumes:
      # NOTE: Only kme1 generates epoch files in this configuration
      # TODO: Does watcher need digest file mounts like this now?
      - ./volumes/kme1/qkd/epoch_files/${LOCAL_KME_ID:-SETME}:/epoch_files
      - ./volumes/kme1/qkd/digest_files/${LOCAL_KME_ID:-SETME}:/digest_files
      - ./volumes/${LOCAL_KME_ID:-SETME}/certificates:/certificates


networks:

  # Use the private internal network created by Docker to be shared
  # by any backend service that needs to communicate amongst internal services
  internal-private:
    external: false
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.192.0/24
